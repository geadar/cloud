#!/bin/sh
#!/bin/bash

filecloud=$(pwd)
echo $filecloud

mkdir -p $filecloud/log
mkdir -p $filecloud/tmp

# Folders
LIST=$filecloud
LOG=$filecloud/log
TMP=$filecloud/tmp

echo $LIST
echo $LOG
echo $TMP

# archivos
SET=$TMP/set.txt
TIME=$TMP/time.txt
TIME1=$TMP/time1.txt
TIME2=$TMP/time2.txt
TIME3=$TMP/time3.txt

TEMP1=$TMP/temp1.txt
TEMP2=$TMP/temp2.txt
TEMP3=$TMP/temp3.txt
TEMP4=$TMP/temp4.txt
TEMP5=$TMP/temp5.txt

cat /dev/null > $SET
cat /dev/null > $TIME
cat /dev/null > $TIME1
cat /dev/null > $TIME2
cat /dev/null > $TIME3
cat /dev/null > $TEMP1
cat /dev/null > $TEMP2
cat /dev/null > $TEMP3
cat /dev/null > $TEMP4
cat /dev/null > $TEMP5

#---------------------------------------------------------------
# Captura del nombre del archivo .rar para generar las carpetas
find $LIST/*.rar > $TEMP4
awk -F "/" '{print $5}' $TEMP4 | sed 's/.rar//' > $TEMP5
cat $TEMP5
FOLDER_CLOUD_NAME=$( cat $TEMP5 )
echo $FOLDER_CLOUD_NAME

# creacion de carpeta dentro de la carpeta log
mkdir $LOG/$FOLDER_CLOUD_NAME

# link a la carpeta dentro del log
LOGJOB=$LOG/$FOLDER_CLOUD_NAME
echo $LOGJOB
touch $LOGJOB/"$FOLDER_CLOUD_NAME"_unrar.txt

# Verificacion del estado del RAR
unrar t $LIST/"$FOLDER_CLOUD_NAME".rar > $LOGJOB/"$FOLDER_CLOUD_NAME"_unrar.txt

#
valuerar=$( grep -ic "All OK" $LOGJOB/"$FOLDER_CLOUD_NAME"_unrar.txt )

# Comienzo del primer condicional que verifica el estado del archivo comprimido
if [ $valuerar -eq 1 ]
then
echo "TODO OKKKKKKKKKKKKKKKK"

#----crear la carpeta en el CLOUD
/usr/sbin/drive folder -t $FOLDER_CLOUD_NAME

#----TamaÃ±o de cada archivo
SIZE=1000

#-----Crea Folder local temporal
mkdir $LIST/$FOLDER_CLOUD_NAME
touch $LOG/$FOLDER_CLOUD_NAME/"$FOLDER_CLOUD_NAME"_log.txt

#------extraer el id del folder del cloud-------------
FOLDER_CLOUD_ID=$TMP/id.txt
/usr/sbin/drive list -t $FOLDER_CLOUD_NAME > $TEMP1

# Busqueda del CLOUD ID
sed '1d' $TEMP1 | awk '{ print $1}' > $FOLDER_CLOUD_ID
ID=`head -1 $FOLDER_CLOUD_ID | tail -1`
echo "$ID"
echo "ID en CLOUD de folder $FOLDER_CLOUD_NAME : $ID" >> $LOGJOB/"$FOLDER_CLOUD_NAME"_log.txt

#-------Comienzo del registro de tiempo total-----------------------------------
	SECONDS_PER_HOUR=3600
	SECONDS_PER_MINUTE=60
	start=$(date +%s.%N)

# armado de las partes a subir
split -a 3 -d --bytes="$SIZE"M $LIST/*.rar $LIST/$FOLDER_CLOUD_NAME/"$FOLDER_CLOUD_NAME"_
ls $LIST/$FOLDER_CLOUD_NAME | wc -l > $SET
echo $SET
L=`head -1 $SET | tail -1`
echo "El total de archivos es $L"
echo "Total $L partes  Hora de inicio $(date '+%Y-%m-%d') $(date +"%T")" >> $LOGJOB/"$FOLDER_CLOUD_NAME"_log.txt

#--------Si los archivos son menores a 100------------------------------------
if [ $L -lt 99 ];
   then
       echo " - de 100 archivos ETAPA 1" 
       for (( i=0; i<$L; i++ ))
       do
            if [ $i -lt 10 ];
            then
                start1=$(date +%s.%N)
                drive upload --parent $ID --file $LIST/$FOLDER_CLOUD_NAME/"$FOLDER_CLOUD_NAME"_00$i

                end1=$(date +%s.%N)
                runtime1=$(python -c "print(${end1} - ${start1})")
                seconds1=`echo "$runtime1" | awk '{printf "%.0f\n", $1}'`
                hours1=$((${seconds1} / ${SECONDS_PER_HOUR}))
                seconds1=$((${seconds1} % ${SECONDS_PER_HOUR}))
                minutes1=$((${seconds1} / ${SECONDS_PER_MINUTE}))
                seconds1=$((${seconds1} % ${SECONDS_PER_MINUTE}))
                printf "%02d:%02d:%02d\n" ${hours1} ${minutes1} ${seconds1} > $TIME1

                LOG1=`cat $TIME1`

                echo "$FOLDER_CLOUD_NAME"_00$i tiempo $LOG1 hh:mm:ss >> $LOGJOB/"$FOLDER_CLOUD_NAME"_log.txt
                echo "$FOLDER_CLOUD_NAME"_00$i tiempo $LOG1 hh:mm:ss

                else

                start2=$(date +%s.%N)
                drive upload --parent $ID --file $LIST/$FOLDER_CLOUD_NAME/"$FOLDER_CLOUD_NAME"_0$i

                end2=$(date +%s.%N)
                runtime2=$(python -c "print(${end2} - ${start2})")
                seconds2=`echo "$runtime2" | awk '{printf "%.0f\n", $1}'`
                hours2=$((${seconds2} / ${SECONDS_PER_HOUR}))
                seconds2=$((${seconds2} % ${SECONDS_PER_HOUR}))
                minutes2=$((${seconds2} / ${SECONDS_PER_MINUTE}))
                seconds2=$((${seconds2} % ${SECONDS_PER_MINUTE}))
                printf "%02d:%02d:%02d\n" ${hours2} ${minutes2} ${seconds2} > $TIME2

                LOG2=`cat $TIME2`

                echo "$FOLDER_CLOUD_NAME"_0$i OK tiempo $LOG2 hh:mm:ss >> $LOGJOB/"$FOLDER_CLOUD_NAME"_log.txt
                echo "$FOLDER_CLOUD_NAME"_0$i OK tiempo $LOG2 hh:mm:ss

                fi
                done

                end=$(date +%s.%N)
                runtime=$(python -c "print(${end} - ${start})")
                seconds=`echo "$runtime" | awk '{printf "%.0f\n", $1}'`
                hours=$((${seconds} / ${SECONDS_PER_HOUR}))
                seconds=$((${seconds} % ${SECONDS_PER_HOUR}))
                minutes=$((${seconds} / ${SECONDS_PER_MINUTE}))
                seconds=$((${seconds} % ${SECONDS_PER_MINUTE}))
                printf "%02d:%02d:%02d\n" ${hours} ${minutes} ${seconds} > $TIME

                LOG3=`cat $TIME`

                echo "Thats all folks!!!! Tiempo total $LOG3 hh:mm:ss" >> $LOGJOB/"$FOLDER_CLOUD_NAME"_log.txt


# Confirmacion y verificacion de la subida de archivos al CLOUD
for (( i=0; i<$L; i++ ))
 do
   if [ $i -lt 10 ];
      then
          drive list -t "$FOLDER_CLOUD_NAME"_00$i >> $TEMP2
          echo "OK File $FOLDER_CLOUD_NAME_00$i"
          else
          drive list -t "$FOLDER_CLOUD_NAME"_0$i >> $TEMP2
          echo "OK File $FOLDER_CLOUD_NAME_0$i"
          fi
      done

# Limpieza de las palabras Id Title Size y Created del archivo $FOLDER_CLOUD_NAME
sed -e 's/Id//' -e 's/Title//' -e 's/Size//' -e 's/Created//' $TEMP2 > $TEMP3

# Limpieza de los espacios en blancos y save en archivo log
cat $TEMP3 | sed '/^ *$/d' > $LOGJOB/"$FOLDER_CLOUD_NAME"_confirmacion.txt

# confirmacion 2
touch $LOGJOB/"$FOLDER_CLOUD_NAME"_verificacion.txt
for (( i=0; i<$L; i++ ))
 do
   if [ $i -lt 10 ];
      then
          value=$( grep -ic "$FOLDER_CLOUD_NAME"_00$i $LOGJOB/"$FOLDER_CLOUD_NAME"_confirmacion.txt )
          if [ $value -eq 1 ]
             then
                 echo "$FOLDER_CLOUD_NAME"_00$i OK   >> $LOGJOB/"$FOLDER_CLOUD_NAME"_verificacion.txt
                 else
                 echo "$FOLDER_CLOUD_NAME"_00$i FAIL >> $LOGJOB/"$FOLDER_CLOUD_NAME"_verificacion.txt
                 drive upload --parent $ID --file $LIST/$FOLDER_CLOUD_NAME/"$FOLDER_CLOUD_NAME"_00$i
                 fi
             else
                 value2=$( grep -ic "$FOLDER_CLOUD_NAME"_0$i $LOGJOB/"$FOLDER_CLOUD_NAME"_confirmacion.txt )
                 if [ $value2 -eq 1 ]
                 then
                 echo "$FOLDER_CLOUD_NAME"_0$i OK >> $LOGJOB/"$FOLDER_CLOUD_NAME"_verificacion.txt
                 else
                 echo "$FOLDER_CLOUD_NAME"_0$i FAIL >> $LOGJOB/"$FOLDER_CLOUD_NAME"_verificacion.txt
                 drive upload --parent $ID --file $LIST/$FOLDER_CLOUD_NAME/"$FOLDER_CLOUD_NAME"_0$i
                 fi
fi
done

# Busqueda de un FAIL dentro del archivo LOG
value3=$( grep -ic "FAIL" $LOGJOB/"$FOLDER_CLOUD_NAME"_verificacion.txt )
if [ $value3 -eq 1 ]
   then
      echo "OJOOOOOO Incompleto"
   else
   # Borrado de carpeta temporal
   # rm -rf /DATA2/HISTORICO-DATA/split/"$FOLDER_CLOUD_NAME"
   echo "COMPLETO"
fi

#-------------------------------------------------------------------------------
else
echo "+ de 100 archivos ETAPA 2"
#-------Final del condicional de ID menor de 100--------------------------------
for (( i=0; i<$L; i++ ))
 do
  	if [ $i -lt 10 ];
       then
        		start1=$(date +%s.%N)
            # subida partes 1-10
        		drive upload --parent $ID --file $LIST/$FOLDER_CLOUD_NAME/"$FOLDER_CLOUD_NAME"_00$i

        		end1=$(date +%s.%N)
        		runtime1=$(python -c "print(${end1} - ${start1})")
        		seconds1=`echo "$runtime1" | awk '{printf "%.0f\n", $1}'`
        		hours1=$((${seconds1} / ${SECONDS_PER_HOUR}))
        		seconds1=$((${seconds1} % ${SECONDS_PER_HOUR}))
        		minutes1=$((${seconds1} / ${SECONDS_PER_MINUTE}))
        		seconds1=$((${seconds1} % ${SECONDS_PER_MINUTE}))
        		printf "%02d:%02d:%02d\n" ${hours1} ${minutes1} ${seconds1} > $TIME1
        		LOG1=`cat $TIME1`

        		echo "$FOLDER_CLOUD_NAME"_00$i tiempo $LOG1 hh:mm:ss >> $LOGJOB/"$FOLDER_CLOUD_NAME"_log.txt
        		echo "$FOLDER_CLOUD_NAME"_00$i tiempo $LOG1 hh:mm:ss

            elif [ $i -lt 100 ];
            then
            start2=$(date +%s.%N)
            # subida partes 11-99
            drive upload --parent $ID --file $LIST/$FOLDER_CLOUD_NAME/"$FOLDER_CLOUD_NAME"_0$i

            end2=$(date +%s.%N)
            runtime2=$(python -c "print(${end2} - ${start2})")
            seconds2=`echo "$runtime2" | awk '{printf "%.0f\n", $1}'`
            hours2=$((${seconds2} / ${SECONDS_PER_HOUR}))
            seconds2=$((${seconds2} % ${SECONDS_PER_HOUR}))
            minutes2=$((${seconds2} / ${SECONDS_PER_MINUTE}))
            seconds2=$((${seconds2} % ${SECONDS_PER_MINUTE}))
            printf "%02d:%02d:%02d\n" ${hours2} ${minutes2} ${seconds2} > $TIME2
            LOG2=`cat $TIME2`

            echo "$FOLDER_CLOUD_NAME"_0$i OK tiempo $LOG2 hh:mm:ss >> $LOGJOB/"$FOLDER_CLOUD_NAME"_log.txt
            echo "$FOLDER_CLOUD_NAME"_0$i OK tiempo $LOG2 hh:mm:ss

            else
        		start3=$(date +%s.%N)
            # subida parte 100-final
        		drive upload --parent $ID --file $LIST/$FOLDER_CLOUD_NAME/"$FOLDER_CLOUD_NAME"_$i

        		end3=$(date +%s.%N)
        		runtime3=$(python -c "print(${end3} - ${start3})")
        		seconds3=`echo "$runtime3" | awk '{printf "%.0f\n", $1}'`
        		hours3=$((${seconds3} / ${SECONDS_PER_HOUR}))
        		seconds3=$((${seconds3} % ${SECONDS_PER_HOUR}))
        		minutes3=$((${seconds3} / ${SECONDS_PER_MINUTE}))
        		seconds3=$((${seconds3} % ${SECONDS_PER_MINUTE}))
        		printf "%02d:%02d:%02d\n" ${hours3} ${minutes3} ${seconds3} > $TIME3
        		LOG3=`cat $TIME3`

        		echo "$FOLDER_CLOUD_NAME"_$i OK tiempo $LOG3 hh:mm:ss >> $LOGJOB/"$FOLDER_CLOUD_NAME"_log.txt
        		echo "$FOLDER_CLOUD_NAME"_$i OK tiempo $LOG3 hh:mm:ss

             fi
	        	 done
             end=$(date +%s.%N)
             runtime=$(python -c "print(${end} - ${start})")
             seconds=`echo "$runtime" | awk '{printf "%.0f\n", $1}'`
             hours=$((${seconds} / ${SECONDS_PER_HOUR}))
             seconds=$((${seconds} % ${SECONDS_PER_HOUR}))
             minutes=$((${seconds} / ${SECONDS_PER_MINUTE}))
             seconds=$((${seconds} % ${SECONDS_PER_MINUTE}))
             printf "%02d:%02d:%02d\n" ${hours} ${minutes} ${seconds} > $TIME
             LOG4=`cat $TIME`
             echo "Thats all folks!!!! Tiempo total $LOG4 hh:mm:ss" >> $LOGJOB/"$FOLDER_CLOUD_NAME"_log.txt

# Confirmacion y verificacion de la subida de archivos al CLOUD
for (( i=0; i<$L; i++ ))
do
	if [ $i -lt 10 ];
	then
 			drive list -t "$FOLDER_CLOUD_NAME"_00$i >> $TEMP2
			echo OK File "$FOLDER_CLOUD_NAME"_00$i
	elif [ $i -lt 99 ];
  then
 			drive list -t "$FOLDER_CLOUD_NAME"_0$i >> $TEMP2
			echo OK File "$FOLDER_CLOUD_NAME"_0$i
  else
      drive list -t "$FOLDER_CLOUD_NAME"_$i >> $TEMP2
      echo OK File "$FOLDER_CLOUD_NAME"_$i
fi
done

# Limpieza de las palabras Id Title Size y Created del archivo $FOLDER_CLOUD_NAME
sed -e 's/Id//' -e 's/Title//' -e 's/Size//' -e 's/Created//' $TEMP2 > $TEMP3

# Limpieza de los espacios en blancos y save en archivo log
cat $TEMP3 | sed '/^ *$/d' > $LOGJOB/"$FOLDER_CLOUD_NAME"_confirmacion.txt

# confirmacion 2
touch $LOGJOB/"$FOLDER_CLOUD_NAME"_verificacion.txt
for (( i=0; i<$L; i++ ))
do
  if [ $i -lt 10 ];
     then
    		value1=$( grep -ic "$FOLDER_CLOUD_NAME"_00$i $LOGJOB/"$FOLDER_CLOUD_NAME"_confirmacion.txt )
    		if [ $value1 -eq 1 ]
     	     then
          		echo "$FOLDER_CLOUD_NAME"_00$i OK >> $LOGJOB/"$FOLDER_CLOUD_NAME"_verificacion.txt
           else
          		echo "$FOLDER_CLOUD_NAME"_00$i FAIL >> $LOGJOB/"$FOLDER_CLOUD_NAME"_verificacion.txt
          		drive upload --parent $ID --file $LIST/"$FOLDER_CLOUD_NAME"/"$FOLDER_CLOUD_NAME"_00$i
           fi
       		 elif [ $i -lt 99 ];
           then
           		value2=$( grep -ic "$FOLDER_CLOUD_NAME"_0$i $LOGJOB/"$FOLDER_CLOUD_NAME"_confirmacion.txt )
            	if [ $value2 -eq 1 ]
                 then
               	  	echo "$FOLDER_CLOUD_NAME"_0$i OK   >> $LOGJOB/"$FOLDER_CLOUD_NAME"_verificacion.txt
               	 else
               			echo "$FOLDER_CLOUD_NAME"_0$i FAIL >> $LOGJOB/"$FOLDER_CLOUD_NAME"_verificacion.txt
               			drive upload --parent $ID --file $LIST/"$FOLDER_CLOUD_NAME"/"$FOLDER_CLOUD_NAME"_0$i
               	 fi
            else
            value3=$( grep -ic "$FOLDER_CLOUD_NAME"_$i $LOGJOB/"$FOLDER_CLOUD_NAME"_confirmacion.txt )
                 if [ $value3 -eq 1 ]
                 then
                 echo "$FOLDER_CLOUD_NAME"_$i OK   >> $LOGJOB/"$FOLDER_CLOUD_NAME"_verificacion.txt
                 else
                 echo "$FOLDER_CLOUD_NAME"_$i FAIL >> $LOGJOB/"$FOLDER_CLOUD_NAME"_verificacion.txt
                 drive upload --parent $ID --file $LIST/"$FOLDER_CLOUD_NAME"/"$FOLDER_CLOUD_NAME"_$i
                fi
       		  fi
		        done

#-------------------------------------------------------------------------------
# Busqueda de un FAIL dentro del archivo LOG
value4=$( grep -ic "FAIL" $LOGJOB/"$FOLDER_CLOUD_NAME"_verificacion.txt )
if [ $value4 -eq 1 ]
   		then
      		echo "OJOOOOOO Incompleto"
      else
        # Borrado de carpeta temporal
      	# rm -rf /DATA2/HISTORICO-DATA/split/"$FOLDER_CLOUD_NAME"
       		echo "COMPLETO"
      fi
#-------------------------------------------------------------------------------
fi
#-------------------------------------------------------------------------------
# Este es el else del innicio que verifica el estado del archivo RAR
else
  echo "RAR con error!!!!!!!!!!!!!!"
fi
done
